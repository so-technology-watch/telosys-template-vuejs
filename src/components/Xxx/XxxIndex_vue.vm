#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
##
#set ( $argsKeysDot = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $argsKeysDot = $argsKeysDot + "+'/'+modalData.${key.name}" )
#else
#set ( $argsKeysDot = $argsKeysDot + "modalData.${key.name}" )
#end
#end
##
#set ( $keyAttributes = "" )
#set ( $modalDataKeyAttributes = "" )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $keyAttributes = $keyAttributes + "/" )
#set ( $modalDataKeyAttributes = $modalDataKeyAttributes + "," )
#end
#set ( $keyAttributes = $keyAttributes + ${uncapitalizedEntityName} + '.' + ${fn.uncapitalize($key.name)} )
#set ( $modalDataKeyAttributes = $modalDataKeyAttributes + 'modalData.' + ${fn.uncapitalize($key.name)} )
#end
##
<template>
    <div class="container">
    <div class="container">
        <div class="panel-group">
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3>
                        <span class="glyphicon glyphicon-leaf"></span>
                        ${entity.name} List
						<router-link to="/${uncapitalizedEntityName}/form" title="Create a new ${uncapitalizedEntityName}">
                            <button type="button" class="btn btn-success pull-right"><span
                                        class="glyphicon glyphicon-plus"></span> Create
                            </button>
						</router-link>
                    </h3>
                </div>
                <div class="panel-body">
                    <div v-bind:style="'display:'+status.display" class="panel-group">
                        <div v-bind:class="'panel panel-'+status.bootstrapPanelColor">
                            <div class="panel-heading">{{ status.status }}
                                <div class="panel panel-body">{{ status.message }}
                                </div>
                            </div>
                        </div>
                    </div>
					<table class="table table-striped table-bordered text-center">
              			<thead>
                			<tr>
#foreach ( $key in $entity.attributes )
                   				 <td>${key.name}</td>
#end
               				</tr>
                		</thead>
                		<tbody>
                			<tr v-for="${uncapitalizedEntityName} in ${uncapitalizedEntityName}s">
#foreach ( $key in $entity.attributes )
                				<td><router-link :to="`/${uncapitalizedEntityName}/form/${DOLLAR}{+$keyAttributes}`">{{${uncapitalizedEntityName}.${key.name}}}</router-link></td>
#end                				
                				<td>
                					<a @click="showModal = true; edit${entity.name}(${uncapitalizedEntityName})"><span class="glyphicon glyphicon-trash"></span></a>
                					<modal v-if="showModal" @close="showModal = false">
                					<div slot="footer">
                                        <button type="button" class="btn btn-success pull-right" title="Delete this ${uncapitalizedEntityName}" v-on:click.prevent="showModal = false; delete${entity.name}(modalData)">Yes</button>
                                    </div>
                					</modal>
                				</td>
                			</tr>
                		</tbody>
					</table>
                </div>
            </div>

            <script type="text/x-template" id="modal-template">
                <transition name="modal">
                    <div class="modal-mask">
                        <div class="modal-wrapper">
                            <div class="container modal-container">
                                <div class="panel-group">
                                    <div class="panel panel-info">
                                        <div class="panel-heading">
                                            <h3>Warning</h3>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete this ${uncapitalizedEntityName} ?
                                </div>
                                <div class="modal-footer">
                                    <div class="btn-toolbar">
                                        <button type="button" class="btn btn-danger pull-right"
                                                title="Cancel and close this panel" @click="${DOLLAR}emit('close')">No
                                        </button>

                                        <slot name="footer">
                                        </slot>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </transition>
            </script>

        </div>
    </div>
</div>
</template>

<script>
    import Vue from 'vue'
    import common from '../../common.js'
    import config from '../../../config/config.js'
    import modal from '../modal'

    export default {
        name: '${entity.name}Index',
        data() {
			let http = this.${DOLLAR}http;
            return new Vue({
            el: '#[[#]]#${uncapitalizedEntityName}Panel',
            data: {
                ${uncapitalizedEntityName}s: {},
                modalData: {},
                showModal: false,
                status: {
                    status: null,
                    message: null,
                    display: "none",
                    bootstrapPanelColor: null,
                }
            },
            created () {
                this.fetchData();
            },
            methods: {
                edit${entity.name} (${uncapitalizedEntityName}) {
                    this.modalData = ${uncapitalizedEntityName};
                },
                delete${entity.name}: function (modalData) {
					{
                        http.delete(config.urlApi+'/${uncapitalizedEntityName}/'+${argsKeysDot}).then(response => {
                            common.apiConnect(this, response);
                            this.fetchData();
                        }, response => {
                            common.apiUnreachable(this);

                        });
                        this.status.display = "block";
                    }
                },
                fetchData: function () {
					{
                        http.get(config.urlApi+'/${uncapitalizedEntityName}').then(response => {
                            if(response.body[0]) {
                                this.${uncapitalizedEntityName}s = response.body;
                            }
                        }, response => {
                            common.apiUnreachable(this, response);
                            this.status.display = "block";
                        });
                    }
                }
            }
        });
        }
    }
</script>